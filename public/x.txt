<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebAuthn Registration</title>
</head>
<body>
    <h1>Register with WebAuthn</h1>
    <form id="registrationForm">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br><br>
        <button type="submit">Register</button>
    </form>

    <script>
        console.log('-1');
        document.getElementById('registrationForm').addEventListener('submit', async function(event) {
            event.preventDefault();
            const username = document.getElementById('username').value;

            const registerResponse = await fetch('http://localhost:3000/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ username })
            });

            if (!registerResponse.ok) {
                throw new Error(`Server error: ${registerResponse.status} ${registerResponse.statusText}`);
            }

            const publicKeyCredentialCreationOptions = await registerResponse.json();
            console.log('3');

            console.log("Received Challenge:", publicKeyCredentialCreationOptions.challenge);
            
            // const challenge = Uint8Array.from(atob(base64urlToBase64(publicKeyCredentialCreationOptions.challenge)), c => c.charCodeAt(0));
            const credential = await navigator.credentials.create({
                publicKey: {
                    ...publicKeyCredentialCreationOptions,
                    challenge: Uint8Array.from("testchallenge", c => c.charCodeAt(0)),
                }
            });
            console.log('4');

            const response = {
                username,
                id: credential.id,
                rawId: base64url(credential.rawId),
                type: credential.type,
                response: {
                    clientDataJSON: base64url(credential.response.clientDataJSON),
                    attestationObject: base64url(credential.response.attestationObject)
                }
            };
            console.log('5');
            const registerResponseConfirm = await fetch('http://localhost:3000/registerResponse', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(response)
            });
            console.log('6');
            if (!registerResponseConfirm.ok) {
                throw new Error(`Server error: ${registerResponseConfirm.status} ${registerResponseConfirm.statusText}`);
            }
            console.log('7');
            const result = await registerResponseConfirm.json();
            console.log('Registration successful:', result);
            alert('Registration successful!');
        });

        console.log('8');
       // Helper function to encode ArrayBuffer to base64
       function base64url(arrayBuffer) {
            return btoa(String.fromCharCode.apply(null, new Uint8Array(arrayBuffer)))
                .replace(/\+/g, '-')
                .replace(/\//g, '_')
                .replace(/=+$/, '');
        }

        // Helper function to convert base64url to base64
        function base64urlToBase64(base64url) {
            base64url = base64url.replace(/-/g, '+').replace(/_/g, '/');
            while (base64url.length % 4) {
                base64url += '=';
            }
            return base64url;
        }
    </script>
</body>
</html>
